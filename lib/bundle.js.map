{"version":3,"sources":["webpack:///webpack/bootstrap dc733572b1e99ffd836c","webpack:///./lib/bomberdude.js","webpack:///./lib/gameview.js","webpack:///./lib/computer.js","webpack:///./lib/gamemap.js","webpack:///./lib/tile.js","webpack:///./lib/flame.js","webpack:///./lib/character.js","webpack:///./lib/bomb.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;;;;AAIA,EAAC;;;;;;;ACpDD;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,gBAAe,wFAAwF;AACvG;;;AAGA,IAAG;AACH;AACA;AACA,wBAAuB,oBAAoB,EAAE;AAC7C,gBAAe,wFAAwF;AACvG;AACA;AACA;AACA;AACA,mBAAkB,gFAAgF;AAClG,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAU;AACV,EAAC;AACD;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ,IAAG;AACH;AACA;AACA;AACA,aAAY;AACZ,IAAG;AACH;AACA;AACA;AACA,aAAY;AACZ,IAAG;AACH;AACA;AACA;AACA,aAAY;AACZ,IAAG;AACH;AACA;AACA;AACA,aAAY;AACZ,IAAG;AACH;AACA;AACA;AACA,eAAc;AACd,MAAK;AACL;AACA;AACA;AACA,eAAc;AACd,MAAK;AACL;AACA;AACA;AACA,eAAc;AACd,MAAK;AACL;AACA;AACA;AACA,eAAc;AACd;;;AAGA,wBAAuB,oCAAoC,EAAE;;AAE7D;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;;AAEA;;;;;;;AC5PA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,OAAM,2DAA2D;AACjE,OAAM,8DAA8D;AACpE,OAAM,8DAA8D;AACpE,OAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB,QAAQ;AACzB;AACA,oBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA,QAAO;;AAEP;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA,kBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,aAAa;AACnC,uBAAsB,aAAa;AACnC,uBAAsB,aAAa;AACnC,uBAAsB,aAAa;;AAEnC;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAiB,uBAAuB;AACxC,oBAAmB,0BAA0B;AAC7C;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;;AAEA,QAAO;AACP;;AAEA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,WAAU;AACV;;AAEA;AACA;AACA;;AAEA,WAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL,MAAK;;AAEL;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAsB,yCAAyC;;AAE/D,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,8BAA8B,EAAE;AACvD,IAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB,uBAAuB;AACxC,oBAAmB,0BAA0B;AAC7C;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;ACnqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;;;AAIA;AACA,kDAAiD,gBAAgB,EAAE;AACnE;;;AAGA;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,kBAAkB,EAAE;AAClE,6CAA4C,iBAAiB,EAAE;AAC/D;;;AAGA;AACA;AACA;AACA;;;;;;;;AAQA;;;;;;;ACxBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH,sBAAqB,iCAAiC,EAAE;AACxD;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA,IAAG;AACH;;AAEA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;;AAGA;;;;;;;ACtWA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA,kBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA,kBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA,kBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap dc733572b1e99ffd836c\n **/","const GameView = require('./gameview');\nconst GameMap = require(\"./gamemap\");\nconst gameMenu = new Image();\ngameMenu.src = './img/menu.png';\n\nconst menuMusic = new Audio();\nmenuMusic.src = './sounds/goonies-wiseman.mp3';\nmenuMusic.volume = 0.5;\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  let canvasEl = document.getElementsByTagName(\"canvas\")[0];\n\n  canvasEl.width = GameMap.DIM_X;\n  canvasEl.height = GameMap.DIM_Y;\n\n  let ctx = canvasEl.getContext(\"2d\");\n  gameMenu.onload =  () => {\n    ctx.drawImage(gameMenu, 0, 0, 272, 228, 0, 0, 272, 228);\n  };\n  let soundOn = true;\n  menuMusic.loop = true;\n  menuMusic.play();\n  var map, view;\n  document.onkeydown = (e) =>{\n    if (e.key === 'm') {\n      menuMusic.pause();\n      map = new GameMap(soundOn, 4);\n      view = new GameView(ctx, map, true);\n      view.start();\n    }\n    if (e.key === 'n') {\n      menuMusic.pause();\n\n      map = new GameMap(soundOn, 4);\n      view = new GameView(ctx, map);\n      view.start();\n    }\n\n    if (e.key === 't') {\n      if (menuMusic.paused) {\n        soundOn = true;\n        menuMusic.play();\n      } else {\n        soundOn = false;\n        menuMusic.pause();\n      }\n    }\n\n  };\n\n\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/bomberdude.js\n ** module id = 0\n ** module chunks = 0\n **/","const Computer = require('./computer');\n\nvar gameOver = new Image();\ngameOver.src = './img/gameover.png';\n\nvar GameView = function (ctx, gameMap, computer = false) {\n\n  this.context = ctx;\n  this.gameMap = gameMap;\n  this.character1 = this.gameMap.addCharacter1();\n  this.character2 = this.gameMap.addCharacter2();\n  this.character3 = this.gameMap.addCharacter3();\n  this.character4 = this.gameMap.addCharacter4();\n\n  this.computer = computer;\n\n  if (computer) {\n    this.computer1 = new Computer(this.character2);\n  }\n\n  this.computer2 = new Computer(this.character3);\n  this.computer3 = new Computer(this.character4);\n};\n\nGameView.prototype.bindKeyHandlers = function (character, character2 = false) {\n  onkeydown = function (e) {\n    if (e.key ==='v') {\n      character.dropBomb();\n    }\n\n    if (e.key === 'w') {\n      character.moveUp();\n    }\n\n    if (e.key === 's') {\n      character.moveDown();\n    }\n\n    if (e.key === 'd') {\n      character.moveRight();\n    }\n\n    if (e.key === 'a') {\n      character.moveLeft();\n    }\n\n    if (!!character2) {\n      if (e.key ==='p') {\n        character2.dropBomb();\n      }\n\n      if (e.key === 'i') {\n        character2.moveUp();\n      }\n\n      if (e.key === 'k') {\n        character2.moveDown();\n      }\n\n      if (e.key === 'l') {\n        character2.moveRight();\n      }\n\n      if (e.key === 'j') {\n        character2.moveLeft();\n      }\n\n    }\n  };\n\n  onkeyup = function (e) {\n    if (e.key === 'w') {\n      character.stopMoveUp();\n    }\n    if (e.key === 's') {\n      character.stopMoveDown();\n    }\n    if (e.key === 'd') {\n      character.stopMoveRight();\n    }\n    if (e.key === 'a') {\n      character.stopMoveLeft();\n    }\n    if (!!character2) {\n      if (e.key === 'i') {\n        character2.stopMoveUp();\n      }\n      if (e.key === 'k') {\n        character2.stopMoveDown();\n      }\n      if (e.key === 'l') {\n        character2.stopMoveRight();\n      }\n\n      if (e.key === 'j') {\n        character2.stopMoveLeft();\n      }\n\n    }\n\n  };\n};\n\n\nGameView.prototype.start = function () {\n  if (this.computer) {\n    this.bindKeyHandlers(this.character1);\n  } else {\n    this.bindKeyHandlers(this.character1, this.character2);\n  }\n\n  this.lastTime = 0;\n  requestAnimationFrame(this.animate.bind(this));\n};\n\nGameView.prototype.animate = function (time) {\n  const timeDelta = time - this.lastTime;\n  this.gameMap.step(time);\n\n  if (this.gameMap.time < time) {\n    this.gameMap.drawFrame(this.context);\n  }\n\n  this.lastTime = time;\n  requestAnimationFrame(this.animate.bind(this));\n};\n\nGameView.MOVES1 = {\n  \"w\": [ 0, -1],\n  \"a\": [-1,  0],\n  \"s\": [ 0,  1],\n  \"d\": [ 1,  0],\n  \"v\": 'bomb',\n};\n\nGameView.MOVES2 = {\n  \"i\": [ 0, -1],\n  \"j\": [-1,  0],\n  \"k\": [ 0,  1],\n  \"l\": [ 1,  0],\n  \"p\": 'bomb'\n};\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/gameview.js\n ** module id = 1\n ** module chunks = 0\n **/","var Computer = function (character) {\n  this.character = character;\n  this.gameMap = character.gameMap;\n  this.pos = character.pos;\n  this.futurePos = null;\n  this.dangerTiles = [];\n  this.inDanger = false;\n  this.validMoves = {};\n  this.direction = null;\n  this.previousMapPos = [];\n  this.previousDirection = null;\n  this.numBombs = 1;\n  this.move(this.findAdjacentTile());\n};\n\nconst oppositeDirections = {\n  'top': 'bottom',\n  'bottom': 'top',\n  'left': 'right',\n  'right': 'left'\n};\n\nComputer.prototype.walkRight = function (stop) {\n  if (stop) {\n    this.character.stopMoveRight();\n  } else {\n    this.character.moveRight();\n  }\n};\n\nComputer.prototype.walkLeft = function (stop) {\n  if (stop) {\n    this.character.stopMoveLeft();\n  } else {\n    this.character.moveLeft();\n  }\n};\n\nComputer.prototype.walkTop = function (stop) {\n  if (stop) {\n    this.character.stopMoveUp();\n  } else {\n    this.character.moveUp();\n  }\n};\n\nComputer.prototype.walkBottom = function (stop) {\n  if (stop) {\n    this.character.stopMoveDown();\n  } else {\n    this.character.moveDown();\n  }\n};\n\nComputer.prototype.move = function (directionObj = false) {\n  if (directionObj !== false) {\n\n    let futureMapPos = directionObj.mapPos;\n    let futureMapPosX = Math.floor((futureMapPos[0] * 16) + 2);\n    let futureMapPosY = Math.floor((futureMapPos[1] * 16) + 2);\n    this.futurePos = [futureMapPosX, futureMapPosY];\n    let walkFunc;\n    if (directionObj.direction === 'top') {\n      walkFunc = this.walkTop.bind(this);\n    } else if (directionObj.direction === 'right') {\n      walkFunc = this.walkRight.bind(this);\n    } else if (directionObj.direction === 'bottom'){\n      walkFunc = this.walkBottom.bind(this);\n    } else {\n      walkFunc = this.walkLeft.bind(this);\n    }\n\n    walkFunc();\n    this.refreshIntervalId = setInterval( () => {\n      let futurePosX = this.futurePos[0];\n      let futurePosY =  this.futurePos[1];\n\n      let characterPosX = this.character.pos[0];\n      let characterPosY = this.character.pos[1];\n      if (futurePosX === characterPosX && futurePosY === characterPosY) {\n\n        walkFunc(123);\n        clearInterval(this.refreshIntervalId);\n        this.handleTurn();\n      }\n    }, 5);\n  }\n};\n\nComputer.prototype.handleTurn = function () {\n  let mapPos = this.character.getMapBombPos(this.pos);\n  if (this.gameMap.isPlayer(mapPos, this.character.playerNum) !== false ) {\n    this.move({ direction: oppositeDirections[this.previousDirection], mapPos: this.previousMapPos[0] });\n    this.character.dropBomb();\n\n\n  } else if ((this.nextToBlock() && this.character.activeBombs < this.character.numBombs && this.numBombs > 0)) {\n    this.numBombs -= 1;\n    this.character.dropBomb();\n    setTimeout( () => { this.numBombs += 1; }, 2000);\n    this.move({ direction: oppositeDirections[this.previousDirection], mapPos: this.previousMapPos[0] });\n    // let moveObj = this.findAdjacentTile();\n    // this.direction = moveObj.direction;\n    // this.move(this.findAdjacentTile());\n    // debugger\n    // this.move({ direction: oppositeDirections[this.direction], mapPos: this.previousMapPos[1] });\n  } else {\n    this.move(this.findAdjacentTile());\n  }\n};\n\nComputer.prototype.startPlay = function () {\n  this.findValidDirection();\n};\n\n\nComputer.prototype.nextToBlock = function () {\n  let mapPos = this.character.getMapPos(this.character.pos);\n\n  if (this.gameMap.isBlock([mapPos[0], mapPos[1] + 1]) || this.gameMap.isBlock([mapPos[0], mapPos[1] - 1]) ||\n      this.gameMap.isBlock([mapPos[0] + 1, mapPos[1]])|| this.gameMap.isBlock([mapPos[0] - 1, mapPos[1]])) {\n      return true;\n  } else {\n    return false;\n  }\n};\n\nComputer.prototype.isDangerous = function (pos) {\n  this.dangerTiles = {};\n\n  this.gameMap.bombs.forEach( (bomb) => {\n    this.dangerTiles[[bomb.mapPos[0], bomb.mapPos[1]]] = true;\n    for (var i = 0; i < bomb.strength; i++) {\n      if (this.gameMap.isPath([bomb.mapPos[0], bomb.mapPos[1] + 1])) {\n        this.dangerTiles[[bomb.mapPos[0], bomb.mapPos[1] + 1]] = true;\n      }\n      if (this.gameMap.isPath([bomb.mapPos[0], bomb.mapPos[1] - 1])) {\n        this.dangerTiles[[bomb.mapPos[0], bomb.mapPos[1] - 1]] = true;\n      }\n      if (this.gameMap.isPath([bomb.mapPos[0] + 1, bomb.mapPos[1]])) {\n        this.dangerTiles[[bomb.mapPos[0] + 1, bomb.mapPos[1]]] = true;\n      }\n      if (this.gameMap.isPath([bomb.mapPos[0] - 1, bomb.mapPos[1]])) {\n        this.dangerTiles[[bomb.mapPos[0] - 1, bomb.mapPos[1]]] = true;\n      }\n    }\n  });\n\n  this.gameMap.flames.forEach( (flame) => {\n    this.dangerTiles[[flame.mapPos[0], flame.mapPos[1]]] = true;\n  });\n  return this.dangerTiles.hasOwnProperty(pos);\n};\n\nComputer.prototype.findAdjacentTile = function () {\n  let mapPos = this.character.getMapPos(this.character.pos);\n  let previousMapPosX = this.previousMapPos[0] ? this.previousMapPos[0][0] : 0;\n  let previousMapPosY = this.previousMapPos[0] ? this.previousMapPos[0][1] : 0;\n\n  this.previousMapPos.unshift(mapPos);\n  let mapPosX = mapPos[0];\n  let mapPosY = mapPos[1];\n\n  if (Math.random() < 0.5 && this.gameMap.isPath([mapPos[0] + 1, mapPos[1]]) && !this.isDangerous([mapPos[0] + 1, mapPos[1]]) && this.gameMap.isBomb([mapPos[0] + 1, mapPos[1]]) === false && (previousMapPosX !== mapPosX + 1 || previousMapPosY !== mapPosY)) {\n  // this.previousMapPos = mapPos;\n  mapPos = [mapPos[0] + 1, mapPos[1]];\n  this.previousDirection = 'right';\n  return { direction: 'right', mapPos: mapPos };\n} else if (Math.random() < 0.5 && this.gameMap.isPath([mapPos[0] - 1, mapPos[1]]) && !this.isDangerous([mapPos[0] - 1, mapPos[1]]) && this.gameMap.isBomb([mapPos[0] - 1, mapPos[1]]) === false && (previousMapPosX !== mapPosX - 1 || previousMapPosY !== mapPosY)) {\n  // this.previousMapPos = mapPos;\n  mapPos = [mapPos[0] - 1, mapPos[1]];\n  this.previousDirection = 'left';\n  return { direction: 'left', mapPos: mapPos };\n}\n  else if (this.gameMap.isPath([mapPos[0], mapPos[1] + 1]) && !this.isDangerous([mapPos[0], mapPos[1] + 1]) && this.gameMap.isBomb([mapPos[0], mapPos[1] + 1]) === false && (previousMapPosX !== mapPosX || previousMapPosY !== mapPosY + 1)) {\n    // this.previousMapPos = mapPos;\n    mapPos = [mapPos[0], mapPos[1] + 1];\n    this.previousDirection = 'bottom';\n    return { direction: 'bottom', mapPos: mapPos };\n  } else if (this.gameMap.isPath([mapPos[0], mapPos[1] - 1]) && !this.isDangerous([mapPos[0], mapPos[1] - 1]) && this.gameMap.isBomb([mapPos[0], mapPos[1] - 1]) === false && (previousMapPosX !== mapPosX || previousMapPosY !== mapPosY - 1)) {\n    // this.previousMapPos = mapPos;\n    mapPos = [mapPos[0], mapPos[1] - 1];\n    this.previousDirection = 'top';\n    return { direction: 'top', mapPos: mapPos };\n  } else if (Math.random() < 0.5 && this.gameMap.isPath([mapPos[0] + 1, mapPos[1]]) && !this.isDangerous([mapPos[0] + 1, mapPos[1]]) && this.gameMap.isBomb([mapPos[0] + 1, mapPos[1]]) === false && (previousMapPosX !== mapPosX + 1 || previousMapPosY !== mapPosY)) {\n    // this.previousMapPos = mapPos;\n    mapPos = [mapPos[0] + 1, mapPos[1]];\n    this.previousDirection = 'right';\n    return { direction: 'right', mapPos: mapPos };\n  } else if (this.gameMap.isPath([mapPos[0] - 1, mapPos[1]]) && !this.isDangerous([mapPos[0] - 1, mapPos[1]]) && this.gameMap.isBomb([mapPos[0] - 1, mapPos[1]]) === false && (previousMapPosX !== mapPosX - 1 || previousMapPosY !== mapPosY)) {\n    // this.previousMapPos = mapPos;\n    mapPos = [mapPos[0] - 1, mapPos[1]];\n    this.previousDirection = 'left';\n    return { direction: 'left', mapPos: mapPos };\n  } else if (this.gameMap.isPath([mapPos[0] + 1, mapPos[1]]) && !this.isDangerous([mapPos[0] + 1, mapPos[1]]) && this.gameMap.isBomb([mapPos[0] + 1, mapPos[1]]) === false && (previousMapPosX !== mapPosX + 1 || previousMapPosY !== mapPosY)) {\n    // this.previousMapPos = mapPos;\n    mapPos = [mapPos[0] + 1, mapPos[1]];\n    this.previousDirection = 'right';\n    return { direction: 'right', mapPos: mapPos };\n  } else  if (this.gameMap.isPath([mapPos[0], mapPos[1] + 1]) && !this.isDangerous([mapPos[0], mapPos[1] + 1]) && this.gameMap.isBomb([mapPos[0], mapPos[1] + 1]) === false ) {\n      // this.previousMapPos = mapPos;\n      mapPos = [mapPos[0], mapPos[1] + 1];\n      this.previousDirection = 'bottom';\n      return { direction: 'bottom', mapPos: mapPos };\n    } else if (this.gameMap.isPath([mapPos[0], mapPos[1] - 1]) && !this.isDangerous([mapPos[0], mapPos[1] - 1]) && this.gameMap.isBomb([mapPos[0], mapPos[1] - 1]) === false ) {\n      // this.previousMapPos = mapPos;\n      mapPos = [mapPos[0], mapPos[1] - 1];\n      this.previousDirection = 'top';\n      return { direction: 'top', mapPos: mapPos };\n    } else if (this.gameMap.isPath([mapPos[0] + 1, mapPos[1]]) && !this.isDangerous([mapPos[0] + 1, mapPos[1]]) && this.gameMap.isBomb([mapPos[0] + 1, mapPos[1]]) === false ) {\n      // this.previousMapPos = mapPos;\n      mapPos = [mapPos[0] + 1, mapPos[1]];\n      this.previousDirection = 'right';\n      return { direction: 'right', mapPos: mapPos };\n    } else if (this.gameMap.isPath([mapPos[0] - 1, mapPos[1]]) && !this.isDangerous([mapPos[0] - 1, mapPos[1]]) && this.gameMap.isBomb([mapPos[0] - 1, mapPos[1]]) === false ) {\n      // this.previousMapPos = mapPos;\n      mapPos = [mapPos[0] - 1, mapPos[1]];\n      this.previousDirection = 'left';\n      return { direction: 'left', mapPos: mapPos };\n    }\n\n\n    setTimeout( () => { this.move(this.findAdjacentTile()); }, 200);\n\n  //\n  // else if (Math.random() < 0.5 && this.gameMap.isPath([mapPos[0] - 1, mapPos[1]])) {\n  //   // this.previousMapPos = mapPos;\n  //   mapPos = [mapPos[0] - 1, mapPos[1]];\n  //   return { direction: 'left', mapPos: mapPos };\n  // }\n  // else if (this.gameMap.isPath([mapPos[0] + 1, mapPos[1]])) {\n  //   // this.previousMapPos = mapPos;\n  //   mapPos = [mapPos[0] + 1, mapPos[1]];\n  //   return { direction: 'right', mapPos: mapPos };\n  // }\n  // else if (this.gameMap.isPath([mapPos[0] - 1, mapPos[1]])) {\n  //   // this.previousMapPos = mapPos;\n  //   mapPos = [mapPos[0] - 1, mapPos[1]];\n  //   return { direction: 'left', mapPos: mapPos };\n  // }\n  // else if (this.gameMap.isPath([mapPos[0], mapPos[1] + 1])) {\n  //   // this.previousMapPos = mapPos;\n  //   mapPos = [mapPos[0], mapPos[1] + 1];\n  //   return { direction: 'bottom', mapPos: mapPos };\n  // }\n  // else {\n  //   // this.previousMapPos = mapPos;\n  //   mapPos = [mapPos[0], mapPos[1] - 1];\n  //   return { direction: 'top', mapPos: mapPos };\n  // }\n};\n\nmodule.exports = Computer;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/computer.js\n ** module id = 2\n ** module chunks = 0\n **/","const Tile = require('./tile');\nconst Flame = require('./flame');\nconst Computer = require('./computer');\nconst Character = require('./character');\n\nconst gameOver = new Image();\ngameOver.src = './img/gameover.png';\n\nconst bombImage = new Image();\nbombImage.src = './img/bomb.png';\n\nconst bomber = new Image();\nbomber.src = './img/bomber.gif';\n\nconst bomberInvinc = new Image();\nbomberInvinc.src = './img/bomber-invinc.png';\n\nconst bomberDie = new Image();\nbomberDie.src = './img/bomber-die.png';\n\nconst bomber2 = new Image();\nbomber2.src = './img/bomber2.gif';\n\nconst bomber2Die = new Image();\nbomber2Die.src = './img/bomber2-die.png';\n\nconst bomber2Invinc = new Image();\nbomber2Invinc.src = './img/bomber2-invinc.png';\n\nconst bomber3 = new Image();\nbomber3.src = './img/bomber3.gif';\n\nconst bomber3Die = new Image();\nbomber3Die.src = './img/bomber3-die.png';\n\nconst bomber3Invinc = new Image();\nbomber3Invinc.src = './img/bomber3-invinc.png';\n\nconst bomber4 = new Image();\nbomber4.src = './img/bomber4.gif';\n\nconst bomber4Die = new Image();\nbomber4Die.src = './img/bomber4-die.png';\n\nconst bomber4Invinc = new Image();\nbomber4Invinc.src = './img/bomber4-invinc.png';\n\nconst tile = new Image();\ntile.src = './img/tile.png';\n\nconst wall = new Image();\nwall.src = './img/wall.png';\n\nconst flameImage = new Image();\nflameImage.src = './img/flame.gif';\n\nconst blockImage = new Image();\nblockImage.src = './img/block.png';\n\nconst flamePowerup = new Image();\nflamePowerup.src = './img/flamePowerup.png';\n\nconst bombPowerup = new Image();\nbombPowerup.src = './img/bombPowerup.png';\n\nconst speedPowerup = new Image();\nspeedPowerup.src = './img/speedPowerup.png';\n\nconst scorebarAvatars = new Image();\nscorebarAvatars.src = './img/scorebar-avatars.png';\n\nconst audioOptions = new Image();\naudioOptions.src = './img/audio-options.png';\n\nconst flameCenter = new Image();\nflameCenter.src = './img/flamecenter.png';\n\nconst flameRight = new Image();\nflameRight.src = './img/flameright.png';\n\nconst flameTop = new Image();\nflameTop.src = './img/flametop.png';\n\nconst flameLeft = new Image();\nflameLeft.src = './img/flameleft.png';\n\nconst flameBottom = new Image();\nflameBottom.src = './img/flamebottom.png';\n\nconst explosion = new Audio();\nexplosion.src = './sounds/explosion.mp3';\nexplosion.volume = 0.3;\n\nconst dropbomb = new Audio();\ndropbomb.src = './sounds/dropbomb.mp3';\ndropbomb.volume = 0.3;\n\nconst powerup = new Audio();\npowerup.src = './sounds/powerup.mp3';\npowerup.volume = 0.2;\n\nconst goonies = new Audio();\ngoonies.src = './sounds/goonies.mp3';\n\nconst solar = new Audio();\nsolar.src = './sounds/solar-jetman.mp3';\n\nconst evergreen = new Audio();\nevergreen.src = './sounds/evergreen.mp4';\n\nconst playlist = [goonies, solar];\n\nconst bomberImages = {\n  1: { alive: bomber, invincible: bomberInvinc, dead: bomberDie },\n  2: { alive: bomber2, invincible: bomber2Invinc, dead: bomber2Die },\n  3: { alive: bomber3, invincible: bomber3Invinc, dead: bomber3Die },\n  4: { alive: bomber4, invincible: bomber4Invinc, dead: bomber4Die }\n};\n\nconst flameImages = {\n  'center': flameCenter,\n  'left': flameLeft,\n  'top': flameTop,\n  'right': flameRight,\n  'bottom': flameBottom\n};\n\nconst player1 = {\n  'up': 4,\n  'right': 58,\n  'down': 114,\n  'left': 169\n};\n\nconst player2 = {\n  'up': 4,\n  'right': 58,\n  'down': 114,\n  'left': 169\n};\n\nvar GameMap = function (musicOn, numPlayers) {\n  this.soundOn = true;\n  this.numPlayers = numPlayers;\n\n  this.musicOn = musicOn;\n  this.currentAudio = null;\n  this.tiles = [];\n  this.characters = [];\n  this.tileSize = 16;\n  this.initialize();\n  this.generateBlocks();\n  if (this.musicOn) {\n    this.playMusic();\n  }\n  this.bombs = [];\n  this.flames = [];\n  this.powerups = [];\n  this.time = 0;\n  this.winner = null;\n  this.p1Lives = 2;\n  this.p2Lives = 2;\n  this.p3Lives = 2;\n  this.p4Lives = 2;\n  this.losers = [];\n\n  document.onkeydown = (e) => {\n    if (e.key === 't') {\n      if (this.currentAudio.paused) {\n        this.musicOn = true;\n        this.currentAudio.play();\n      } else {\n        this.musicOn = false;\n        this.currentAudio.pause();\n      }\n    }\n    if (e.key ==='y') {\n      this.toggleSoundEffects();\n    }\n  };\n};\n\nGameMap.DIM_X = 272;\n\nGameMap.DIM_Y = 228;\n\nGameMap.prototype.toggleSoundEffects = function () {\n  if (this.soundOn) {\n    explosion.volume = 0;\n    dropbomb.volume = 0;\n    powerup.volume = 0;\n    this.soundOn = false;\n  } else {\n    explosion.volume = 0.3;\n    dropbomb.volume = 0.3;\n    powerup.volume = 0.1;\n    this.soundOn = true;\n  }\n};\n\nGameMap.prototype.initialize = function () {\n  for (var i = 0; i < 13; i++) {\n    this.tiles.push([]);\n    for (var j = 0; j < 17; j++) {\n      if (i === 0 || j === 0 || i === 12 || j === 16) {\n\n        let wallTile = new Tile([j, i], 'wall');\n        this.tiles[i].push(wallTile);\n      } else if (i % 2 === 0 && j % 2 === 0) {\n\n        let wallTile = new Tile([j, i], 'wall');\n        this.tiles[i].push(wallTile);\n      } else {\n\n        let pathTile = new Tile([j, i]);\n        this.tiles[i].push(pathTile);\n      }\n    }\n  }\n};\n\nGameMap.prototype.playMusic = function () {\n  let id = Math.floor(Math.random() * 2);\n  this.currentAudio = playlist[id];\n  this.currentAudio.play();\n};\n\nGameMap.prototype.step = function (time) {\n\n  this.characters.forEach( (character) => {\n    character.move();\n  });\n    this.time = Math.floor(time);\n};\n\nGameMap.prototype.addCharacter1 = function () {\n  var character1 = new Character([18, 18], this, 1);\n  this.characters.push(character1);\n  return character1;\n};\n\nGameMap.prototype.addCharacter2 = function () {\n  var character2 = new Character([242, 18], this, 2);\n  this.characters.push(character2);\n  return character2;\n};\n\nGameMap.prototype.addCharacter3 = function () {\n  var character3 = new Character([18, 178], this, 3);\n  this.characters.push(character3);\n  return character3;\n};\n\nGameMap.prototype.addCharacter4 = function () {\n  var character4 = new Character([242, 178], this, 4);\n  this.characters.push(character4);\n  return character4;\n};\n\n\nGameMap.prototype.addComputer1 = function () {\n  var computer1 = new Computer([242, 18], this, 2);\n  this.characters.push(computer1);\n  return computer1;\n};\n\nGameMap.prototype.getBomb = function (pos) {\n  return this.bombs[this.isBomb(pos)];\n};\n\nGameMap.prototype.addBomb = function (bomb) {\n  dropbomb.currentTime = 0;\n  dropbomb.play();\n  this.bombs.push(bomb);\n};\n\nGameMap.prototype.renderBombs = function (ctx) {\n  this.bombs.forEach( (bomb, index) => {\n    if (bomb.time <= bomb.explodeTime) {\n      let sx = bomb.frame * 16;\n      ctx.drawImage(bombImage, sx, 0, 16, 16, bomb.mapPos[0] * this.tileSize, bomb.mapPos[1] * this.tileSize + 20, 16, 16);\n    } else {\n      explosion.currentTime = 0;\n      explosion.play();\n      this.removeBomb(index);\n    }\n  });\n};\n\nGameMap.prototype.renderCharacters = function (ctx) {\n  for (var i = 0; i < this.characters.length; i++) {\n    let character = this.characters[i];\n    let characterImage, sy;\n    let dieOffset = 0;\n    let sx = character.frame * 17 + player1[character.faceDirection()];\n    if (character.invincible && character.alive === false) {\n      sy = 25;\n      sx = character.dieFrame * 28;\n      dieOffset = 11;\n      characterImage = bomberImages[character.playerNum].dead;\n    } else if (character.invincible) {\n      sy = this.time % 2 === 0 ? 23 : 0;\n      characterImage = bomberImages[character.playerNum].invincible;\n    } else if (character.alive) {\n      sy = 23;\n      characterImage = bomberImages[character.playerNum].alive;\n    }\n\n    ctx.drawImage(characterImage, sx, 0, 17 + dieOffset, sy, character.pos[0] - 2 - dieOffset/1.6 ,character.pos[1] + 8, 17 + dieOffset, 23 + dieOffset / 5);\n  }\n};\n\nGameMap.prototype.renderFlames = function (ctx) {\n  this.flames.forEach( (flame, index) => {\n    if (flame.time <= flame.extinguishTime) {\n      let sx = flame.last ? 16 : 0;\n      let sy = flame.frame * 16;\n\n      ctx.drawImage(flameImages[flame.orientation], sx, sy, 16, 16, flame.mapPos[0] * this.tileSize, flame.mapPos[1] * this.tileSize + 20, 16, 16);\n    } else {\n      this.removeFlame(index);\n    }\n  });\n};\n\nGameMap.prototype.renderScoreBar = function (ctx) {\n  ctx.fillStyle = '#E8E2D8';\n  ctx.fillRect(0, 0, 272, 228);\n  ctx.drawImage(scorebarAvatars, 0, 0, 13, 11, 5,5, 13, 11);\n  ctx.drawImage(scorebarAvatars, 13, 0, 13, 11, 50 ,5, 13, 11);\n  ctx.drawImage(scorebarAvatars, 26, 0, 13, 11, 190,5, 13, 11);\n  ctx.drawImage(scorebarAvatars, 39, 0, 13, 11, 238 ,5, 13, 11);\n  ctx.strokeText(`x ${this.p1Lives}`,20, 14);\n  ctx.strokeText(`x ${this.p2Lives}`,65, 14);\n  ctx.strokeText(`x ${this.p3Lives}`,205, 14);\n  ctx.strokeText(`x ${this.p4Lives}`,253, 14);\n\n  let musicSx = 0;\n  let soundSx = 0;\n\n\n  if (!this.musicOn) {\n    musicSx = 17;\n  }\n\n  if (!this.soundOn) {\n    soundSx = 17;\n  }\n  ctx.drawImage(audioOptions, musicSx, 0, 16, 16, 120, 3, 12, 12);\n  ctx.drawImage(audioOptions, soundSx, 16, 16, 16, 140, 3, 12, 12);\n};\n\nGameMap.prototype.renderGameOver = function (ctx) {\n  if (this.checkWinner() !== false) {\n    let sx = (this.checkWinner() - 1) * 272;\n    ctx.drawImage(gameOver, sx, 0, 272, 195, 0, 0, 272, 228);\n    if (this.musicOn) {\n      this.currentAudio.pause();\n      evergreen.play();\n    }\n  }\n};\n\nGameMap.prototype.removeBomb = function (index) {\n  this.bombs[index].explode();\n  this.bombs.splice(index, 1);\n};\n\nGameMap.prototype.renderMap = function (ctx) {\n  var size = 16;\n  let xCoord = 0;\n  let yCoord = 20;\n\n  for (var i = 0; i < this.tiles.length; i++) {\n    for (var j = 0; j < this.tiles[1].length; j++) {\n      if (this.tiles[i][j].type === 'wall') {\n        ctx.drawImage(wall, xCoord, yCoord);\n      } else if (this.tiles[i][j].type === 'block') {\n        let block = this.tiles[i][j];\n        let sx = block.frame * size;\n        ctx.drawImage(blockImage, sx, 0, 16, 16, xCoord, yCoord, 16, 16);\n      } else if (this.tiles[i][j].powerup === 'flame') {\n        ctx.drawImage(flamePowerup, xCoord, yCoord);\n      } else if (this.tiles[i][j].powerup === 'bomb') {\n        ctx.drawImage(bombPowerup, xCoord, yCoord);\n\n      } else if (this.tiles[i][j].powerup === 'speed') {\n        ctx.drawImage(speedPowerup, xCoord, yCoord);\n\n      } else {\n        ctx.drawImage(tile, xCoord, yCoord);\n      }\n      xCoord += size;\n    }\n    yCoord += size;\n    xCoord = 0;\n  }\n};\n\nGameMap.prototype.checkWinner = function () {\n  if (this.numPlayers === 1) {\n    return this.characters[0].playerNum;\n  } else {\n    return false;\n  }\n};\n\nGameMap.prototype.isPath = function (pos) {\n  if (this.tiles[pos[1]][pos[0]].type === 'path' ) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nGameMap.prototype.isPowerup = function (pos) {\n  if (this.tiles[pos[1]][pos[0]].powerup) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nGameMap.prototype.isUnsafe = function (pos) {\n  return !this.tiles[pos[1]][pos[0]].safe;\n};\n\nGameMap.prototype.isBomb = function (pos) {\n  let posX = pos[0];\n  let posY = pos[1];\n  let isBomb = false;\n  this.bombs.forEach( (bomb, index) => {\n    let bombX = bomb.mapPos[0];\n    let bombY = bomb.mapPos[1];\n    if (posX === bombX && posY === bombY) {\n      isBomb = index;\n    }\n  });\n  return isBomb;\n};\n\nGameMap.prototype.isBlock = function (pos) {\n  return this.tiles[pos[1]][pos[0]].type === 'block';\n};\n\nGameMap.prototype.isPlayer = function (pos, playerNum) {\n  let posX = pos[0];\n  let posY = pos[1];\n  let isCharacter = false;\n  this.characters.forEach( (character, index) => {\n\n    let characterMapPos = character.getMapBombPos(pos);\n    let characterMapPosX = characterMapPos[0];\n    let characterMapPosY = characterMapPos[1];\n    if (characterMapPosX === posX && characterMapPosY === posY && playerNum !== this.characters[index].playerNum) {\n      isCharacter = index;\n    }\n  });\n  return isCharacter;\n};\n\nGameMap.prototype.destroyBlock = function (pos) {\n  this.tiles[pos[1]][pos[0]].animateDestroy();\n};\n\n\nGameMap.prototype.isLeftPathUnsafe = function (character) {\n  let centerPos = character.centerPos();\n  centerPos[0] -= 6;\n  let mapCenterPos = character.getMapPos(centerPos);\n\n  return this.isUnsafe([mapCenterPos[0], mapCenterPos[1]]);\n};\n\nGameMap.prototype.isRightPathUnsafe = function (character) {\n  let centerPos = character.centerPos();\n  centerPos[0] += 4;\n  let mapCenterPos = character.getMapPos(centerPos);\n\n  return this.isUnsafe([mapCenterPos[0], mapCenterPos[1]]);\n};\n\nGameMap.prototype.isTopPathUnsafe = function (character) {\n  let centerPos = character.centerPos();\n  centerPos[1] -= 5;\n  let mapCenterPos = character.getMapPos(centerPos);\n\n  return this.isUnsafe([mapCenterPos[0], mapCenterPos[1]]);\n};\n\nGameMap.prototype.isBottomPathUnsafe = function (character) {\n  let centerPos = character.centerPos();\n  centerPos[1] += 5;\n  let mapCenterPos = character.getMapPos(centerPos);\n\n  return this.isUnsafe([mapCenterPos[0], mapCenterPos[1]]);\n};\n\nGameMap.prototype.isLeftPathPowerup = function (character) {\n  let centerPos = character.centerPos();\n  centerPos[0] -= 6;\n  let mapCenterPos = character.getMapPos(centerPos);\n\n  return this.isPowerup(mapCenterPos);\n};\n\nGameMap.prototype.isRightPathPowerup = function (character) {\n  let centerPos = character.centerPos();\n  centerPos[0] += 6;\n  let mapCenterPos = character.getMapPos(centerPos);\n\n  return this.isPowerup(mapCenterPos);\n};\n\nGameMap.prototype.isTopPathPowerup = function (character) {\n  let centerPos = character.centerPos();\n  centerPos[1] -= 6;\n  let mapCenterPos = character.getMapPos(centerPos);\n  return this.isPowerup(mapCenterPos);\n};\n\nGameMap.prototype.isBottomPathPowerup = function (character) {\n  let centerPos = character.centerPos();\n  centerPos[1] += 6;\n  let mapCenterPos = character.getMapPos(centerPos);\n\n  return {isPowerup: this.isPowerup(mapCenterPos), pos: mapCenterPos };\n};\n\nGameMap.prototype.isOnPowerup = function (character) {\n  let centerPos = character.centerPos();\n  let mapCenterPos = character.getMapPos(centerPos);\n\n  return {isPowerup: this.isPowerup(mapCenterPos), pos: mapCenterPos };\n};\n\nGameMap.prototype.makeFlame = function (pos, orientation, last) {\n  let gameTile = this.tiles[pos[1]][pos[0]];\n  gameTile.safe = false;\n\n  if (gameTile.type === 'block') {\n    if (gameTile.powerup === null) {\n      gameTile.type = 'path';\n    } else if (gameTile.type === 'flame') {\n\n    } else if (gameTile.type === 'bomb') {\n\n    }\n  } else if (gameTile.type === 'path' ) {\n    if (gameTile.powerup !== null) {\n      gameTile.powerup = null;\n    }\n  }\n\n  let flame = new Flame(pos, this, orientation, last);\n  this.flames.push(flame);\n};\n\nGameMap.prototype.removeFlame = function (index) {\n  this.flames[index].extinguish();\n  this.tiles[this.flames[index].mapPos[1]][this.flames[index].mapPos[0]].safe = true;\n  this.flames.splice(index, 1);\n};\n\nGameMap.prototype.checkCharacter = function () {\n  this.characters.forEach( (character, index) => {\n    if ((this.isTopPathUnsafe(character) || this.isRightPathUnsafe(character) ||\n    this.isBottomPathUnsafe(character) || this.isLeftPathUnsafe(character)) && !character.invincible) {\n      this.removeCharacter(index);\n    }\n    let powerupObj = this.isOnPowerup(character);\n    if (powerupObj.isPowerup) {\n      this.pickupPowerup(character, powerupObj.pos);\n    }\n  });\n};\n\nGameMap.prototype.pickupPowerup = function (character, pos) {\n  if (this.tiles[pos[1]][pos[0]].powerup === 'flame') {\n    character.strength += 1;\n  } else if (this.tiles[pos[1]][pos[0]].powerup === 'bomb') {\n    character.numBombs +=1;\n  } else if (this.tiles[pos[1]][pos[0]].powerup === 'speed' && character.speed < 1.5) {\n    character.speed += 0.1;\n  }\n  powerup.currentTime = 0;\n  powerup.play();\n  this.tiles[pos[1]][pos[0]].powerup = null;\n};\n\nGameMap.prototype.decrementLives = function (playerNum) {\n  if (playerNum === 1) {\n    this.p1Lives -= 1;\n  } else if (playerNum === 2) {\n    this.p2Lives -= 1;\n  } else if (playerNum === 3) {\n    this.p3Lives -= 1;\n  } else if (playerNum === 4) {\n    this.p4Lives -= 1;\n  }\n};\n\nGameMap.prototype.removeCharacter = function (index) {\n  let character = this.characters[index];\n  if (character.lives > 1) {\n    character.animateDie();\n    this.decrementLives(character.playerNum);\n    setTimeout(() => {this.respawnCharacter(character, index);}, 300);\n\n  } else {\n    character.animateDie();\n\n    setTimeout(() => {\n      this.losers.push(character.playerNum);\n      this.numPlayers -= 1;\n      this.characters.splice(index, 1);\n    }, 500);\n  }\n};\n\nGameMap.prototype.respawnCharacter  = function (character, index) {\n  this.characters.splice(index, 1);\n  setTimeout( () => {\n    character.invincible = true;\n    character.alive = true;\n    this.characters.push(character);\n    setTimeout( () => { character.invincible = false; }, 2000);\n  }, 1000);\n};\n\nGameMap.prototype.drawFrame = function (ctx) {\n\n  ctx.clearRect(0, 0, GameMap.DIM_X, GameMap.DIM_Y);\n  this.checkCharacter();\n  this.renderScoreBar(ctx);\n  this.renderMap(ctx);\n  this.renderBombs(ctx);\n  this.renderFlames(ctx);\n  this.renderCharacters(ctx);\n  this.renderGameOver(ctx);\n};\n\nGameMap.prototype.bottomLeftEmpty = function (i, j) {\n  if (this.numPlayers >= 3) {\n    return (i > 9 && j < 3);\n  }\n};\n\nGameMap.prototype.bottomRightEmpty = function (i, j) {\n  if (this.numPlayers === 4) {\n    return (i > 9 && j > 13);\n  }\n};\n\nGameMap.prototype.generateBlocks = function () {\n  for (var i = 0; i < this.tiles.length; i++) {\n    for (var j = 0; j < this.tiles[i].length; j++) {\n      if ((i < 3 && j < 3) || (j > 13 && i < 3) || this.bottomRightEmpty(i, j) || this.bottomLeftEmpty(i, j)) {\n        continue;\n      } else if (this.tiles[i][j].type === 'path' && Math.random() < 0.5){\n        this.tiles[i][j].type = 'block';\n        let randomNum = Math.random();\n        if (randomNum < 0.15) {\n          this.tiles[i][j].powerup = 'flame';\n        } else if (randomNum > 0.4 && randomNum < 0.6) {\n          this.tiles[i][j].powerup = 'bomb';\n        } else if (randomNum > 0.7 && randomNum < 0.8) {\n          this.tiles[i][j].powerup = 'speed';\n        }\n      }\n    }\n  }\n};\n\n\nmodule.exports = GameMap;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/gamemap.js\n ** module id = 3\n ** module chunks = 0\n **/","var Tile = function (pos, type = 'path') {\n  this.pos = pos;\n  this.type = type;\n  this.safe = true;\n  this.powerup = null;\n  this.time = 0;\n  this.destroyTime = 200;\n  this.frame = 0;\n  // this.refreshIntervalId = null;\n};\n\nTile.prototype.destroy = function () {\n  if (this.time >= this.destroyTime) {\n    clearInterval(this.refreshIntervalId);\n    this.type = 'path';\n  } else {\n    this.time += 80;\n    this.frame += 1;\n  }\n};\n\n\n\nTile.prototype.animateDestroy = function () {\n    this.refreshIntervalId = setInterval( () => { this.destroy(); }, 80 );\n};\n\n\nmodule.exports = Tile;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/tile.js\n ** module id = 4\n ** module chunks = 0\n **/","var Flame = function (mapPos, gameMap, orientation, last) {\n  this.mapPos = mapPos;\n  this.gameMap = gameMap;\n  this.orientation = orientation;\n  this.last = last;\n  this.time = 0;\n  this.frame = 0;\n  this.extinguishTime = 500;\n  this.refreshIntervalId = setInterval( ()=> { this.time += 100; }, 100 );\n  this.frameIntervalId = setInterval( ()=> { this.frame += 1; }, 90 );\n};\n\n\nFlame.prototype.extinguish = function () {\n  clearInterval(this.refreshIntervalId);\n  clearInterval(this.frameIntervalId);\n};\n\n\n\n\n\n\n\nmodule.exports = Flame;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/flame.js\n ** module id = 5\n ** module chunks = 0\n **/","const Bomb = require('./bomb');\n\nvar Character = function (pos, gameMap, playerNum) {\n  this.pos = pos;\n  this.gameMap = gameMap;\n  this.playerNum = playerNum;\n\n  this.alive = true;\n  this.invincible = false;\n  this.lives = 3;\n  this.vel = [0,0];\n  this.speed = 1;\n  this.strength = 1;\n  this.numBombs = 1;\n  this.activeBombs = 0;\n  this.moving = false;\n  this.movingLeft = false;\n  this.movingTop = false;\n  this.movingRight = false;\n  this.movingBottom = false;\n  this.facing = 'down';\n  this.actualVel = [0,0];\n  this.frame = 0;\n  this.dieFrame = 0;\n  this.bombId = 0;\n\n};\n\n\nCharacter.prototype.animateDie = function () {\n  this.lives -= 1;\n  this.alive = false;\n  this.invincible = true;\n  this.dieFrame = 0;\n  this.dieIntervalId = setInterval(() => {\n    this.dieFrame += 1;\n  }, 100);\n\n  setTimeout( () => { clearInterval(this.dieInterval); }, 500);\n};\n\nCharacter.prototype.incrementFrame = function () {\n  if (this.frame < 2) {\n    this.frame += 1;\n  } else {\n    this.frame = 0;\n  }\n};\n\nCharacter.prototype.startMoving = function () {\n  if (!this.moving) {\n    this.moving = true;\n    this.incrementFrame();\n    this.intervalId = setInterval(() => {\n      this.incrementFrame();\n    }, 150 / this.speed);\n  }\n};\n\nCharacter.prototype.stopMoving = function () {\n  if (this.vel[0] === 0 && this.vel[1] === 0 && this.moving) {\n    this.moving = false;\n    clearInterval(this.intervalId);\n    this.frame = 0;\n  }\n};\n\nCharacter.prototype.getMapPos = function (pos) {\n  let mapX = Math.floor(pos[0] / this.gameMap.tileSize);\n  let mapY = Math.floor(pos[1] / this.gameMap.tileSize);\n  return [mapX, mapY];\n};\n\nCharacter.prototype.getMapBombPos = function () {\n  let mapX = Math.floor((this.pos[0] + 6) / this.gameMap.tileSize);\n  let mapY = Math.floor((this.pos[1] + 6) / this.gameMap.tileSize);\n  return [mapX, mapY];\n};\n\nCharacter.prototype.topRightPos = function () {\n  let topRightPos = [this.pos[0], this.pos[1]];\n  topRightPos[0] += 12;\n  return topRightPos;\n};\n\nCharacter.prototype.bottomRightPos = function () {\n  let bottomRightPos = [this.pos[0], this.pos[1]];\n  bottomRightPos[0] += 12;\n  bottomRightPos[1] += 12;\n  return bottomRightPos;\n};\n\n\nCharacter.prototype.bottomLeftPos = function () {\n  let bottomLeftPos = [this.pos[0], this.pos[1]];\n  bottomLeftPos[1] += 12;\n  return bottomLeftPos;\n};\n\nCharacter.prototype.centerPos = function () {\n  let centerPos = [this.pos[0], this.pos[1]];\n  centerPos[0] += 7;\n  centerPos[1] += 7;\n  return centerPos;\n};\n\nCharacter.prototype.isLeftPathBlocked = function () {\n  let topLeftPos = [this.pos[0], this.pos[1]];\n  topLeftPos[0] -= 1 * this.speed;\n  let topLeftMapPos = this.getMapPos(topLeftPos);\n\n  let bottomLeftPos = [this.bottomLeftPos()[0], this.bottomLeftPos()[1]];\n  bottomLeftPos[0] -= 1 * this.speed;\n  let bottomLeftMapPos = this.getMapPos(bottomLeftPos);\n\n  let currentMapPos = this.getMapBombPos(this.pos);\n  let leftMapPos = [currentMapPos[0] - 1, currentMapPos[1]];\n  let bombIndex = this.gameMap.isBomb(topLeftMapPos);\n\n  if (this.gameMap.isPath(topLeftMapPos) && this.gameMap.isPath(bottomLeftMapPos)) {\n    if (this.gameMap.isBomb(currentMapPos) === false && bombIndex !== false) {\n      return true;\n    } else if (topLeftMapPos[0] === leftMapPos[0] && bombIndex !== false && !this.gameMap.getBomb(topLeftMapPos).isPlayerBomb(this.bombId, this.playerNum)) {\n      return true;\n    }\n  } else {\n    return true;\n  }\n};\n\nCharacter.prototype.isRightPathBlocked = function () {\n  let topRightPos = [this.topRightPos()[0], this.topRightPos()[1]];\n  topRightPos[0] += 1 * this.speed;\n  let topRightMapPos = this.getMapPos(topRightPos);\n\n  let bottomRightPos = [this.bottomRightPos()[0], this.bottomRightPos()[1]];\n  bottomRightPos[0] += 1 * this.speed;\n  let bottomRightMapPos = this.getMapPos(bottomRightPos);\n\n  let currentMapPos = this.getMapBombPos(this.pos);\n\n  let rightMapPos = [currentMapPos[0] + 1, currentMapPos[1]];\n\n  if (this.gameMap.isPath(topRightMapPos) && this.gameMap.isPath(bottomRightMapPos)) {\n    if (this.gameMap.isBomb(currentMapPos) === false && this.gameMap.isBomb(topRightMapPos) !== false) {\n        return true;\n    } else if (topRightMapPos[0] === rightMapPos[0] && this.gameMap.isBomb(topRightMapPos) !== false && !this.gameMap.getBomb(topRightMapPos).isPlayerBomb(this.bombId, this.playerNum)) {\n        return true;\n    }\n  } else {\n    return true;\n  }\n};\n\nCharacter.prototype.isTopPathBlocked = function () {\n  let topLeftPos = [this.pos[0], this.pos[1]];\n  topLeftPos[1] -= 1 * this.speed;\n  let topLeftMapPos = this.getMapPos(topLeftPos);\n\n  let topRightPos = [this.topRightPos()[0], this.topRightPos()[1]];\n  topRightPos[1] -= 1 * this.speed;\n  let topRightMapPos = this.getMapPos(topRightPos);\n\n  let currentMapPos = this.getMapBombPos(this.pos);\n\n  let topMapPos = [currentMapPos[0], currentMapPos[1] - 1];\n\n  if (this.gameMap.isPath(topLeftMapPos) && this.gameMap.isPath(topRightMapPos)) {\n    if (this.gameMap.isBomb(currentMapPos) === false && this.gameMap.isBomb(topLeftMapPos) !== false) {\n      return true;\n    } else if (topRightMapPos[1] === topMapPos[1] && this.gameMap.isBomb(topLeftMapPos) !== false && !this.gameMap.getBomb(topLeftMapPos).isPlayerBomb(this.bombId, this.playerNum)) {\n      return true;\n    }\n  } else {\n    return true;\n  }\n};\n\nCharacter.prototype.isBottomPathBlocked = function () {\n  let bottomLeftPos = [this.bottomLeftPos()[0], this.bottomLeftPos()[1]];\n  bottomLeftPos[1] += 1 * this.speed;\n  let bottomLeftMapPos = this.getMapPos(bottomLeftPos);\n\n  let bottomRightPos = [this.bottomRightPos()[0], this.bottomRightPos()[1]];\n  bottomRightPos[1] += 1 * this.speed;\n  let bottomRightMapPos = this.getMapPos(bottomRightPos);\n\n  let currentMapPos = this.getMapBombPos(this.pos);\n\n  let bottomMapPos = [currentMapPos[0], currentMapPos[1] + 1];\n\n  if (this.gameMap.isPath(bottomLeftMapPos) && this.gameMap.isPath(bottomRightMapPos) ) {\n    if (this.gameMap.isBomb(currentMapPos) === false && this.gameMap.isBomb(bottomLeftMapPos) !== false) {\n      return true;\n    } else if (bottomLeftMapPos[1] === bottomMapPos[1] && this.gameMap.isBomb(bottomLeftMapPos) !== false && !this.gameMap.getBomb(bottomLeftMapPos).isPlayerBomb(this.bombId, this.playerNum)) {\n      return true;\n    }\n  } else {\n    return true;\n  }\n};\n\nCharacter.prototype.move = function (move) {\n  if (move === 'bomb') {\n    return this.dropBomb();\n  }\n  debugger\n  let currentPos = this.pos;\n  let deltaX = this.vel[0];\n  let deltaY = this.vel[1];\n  let futurePos;\n  if (this.alive) {\n    if (this.isLeftPathBlocked() && this.isTopPathBlocked() && this.isRightPathBlocked()) {\n      if (deltaX > 0 || deltaX < 0) {\n        deltaX = 0;\n      }\n    } else if (this.isLeftPathBlocked() && this.isTopPathBlocked() && this.isBottomPathBlocked()) {\n      if (deltaY > 0 || deltaY < 0) {\n        deltaY = 0;\n      }\n    } else if (this.isLeftPathBlocked() && this.isTopPathBlocked()) {\n      if (deltaX < 0) {\n        deltaX = 0;\n      }\n      if (deltaY < 0) {\n        deltaY = 0;\n      }\n    } else if (this.isTopPathBlocked() && this.isRightPathBlocked()) {\n      if (deltaX > 0) {\n        deltaX = 0;\n      }\n      if (deltaY < 0) {\n        deltaY = 0;\n      }\n    } else if (this.isRightPathBlocked() && this.isBottomPathBlocked()) {\n      if (deltaX > 0) {\n        deltaX = 0;\n      }\n      if (deltaY > 0) {\n        deltaY = 0;\n      }\n    } else if (this.isBottomPathBlocked() && this.isLeftPathBlocked()) {\n      if (deltaX < 0) {\n        deltaX = 0;\n      }\n      if (deltaY > 0) {\n        deltaY = 0;\n      }\n    } else if (this.isLeftPathBlocked() && deltaX < 0) {\n      deltaX = 0;\n    } else if (this.isRightPathBlocked() && deltaX > 0) {\n      deltaX = 0;\n    } else if (this.isTopPathBlocked() && deltaY < 0) {\n      deltaY = 0;\n    } else if (this.isBottomPathBlocked() && deltaY > 0) {\n      deltaY = 0;\n    }\n\n\n\n  this.actualVel = [deltaX, deltaY];\n  let futurePosX = Math.round(currentPos[0] + deltaX);\n  let futurePosY = Math.round(currentPos[1] + deltaY);\n\n  futurePos = [futurePosX, futurePosY];\n  this.pos = futurePos;\n  }\n};\n\nCharacter.prototype.faceDirection = function () {\n  if (this.actualVel[0] < 0) {\n    this.facing = 'left';\n    return 'left';\n  } else if (this.actualVel[0] > 0) {\n    this.facing = 'right';\n\n    return 'right';\n  } else if (this.actualVel[1] < 0) {\n    this.facing = 'up';\n\n    return 'up';\n  } else if (this.actualVel[1] > 0) {\n    this.facing = 'down';\n    return 'down';\n  }\n  return this.facing;\n};\n\nCharacter.prototype.moveUp = function () {\n  this.vel[1] = -1 * this.speed;\n  this.movingTop = true;\n  this.startMoving();\n};\n\nCharacter.prototype.stopMoveUp = function () {\n  if (!this.movingBottom) {\n    this.vel[1] = 0;\n  }\n  this.movingTop = false;\n  this.stopMoving();\n};\n\nCharacter.prototype.moveDown = function () {\n  this.vel[1] = 1 * this.speed;\n  this.movingBottom = true;\n  this.startMoving();\n};\n\nCharacter.prototype.stopMoveDown = function () {\n  if (!this.movingTop) {\n    this.vel[1] = 0;\n  }\n  this.movingBottom = false;\n  this.stopMoving();\n};\n\nCharacter.prototype.moveRight = function () {\n  this.vel[0] = 1 * this.speed;\n  this.movingRight = true;\n  this.startMoving();\n};\n\nCharacter.prototype.stopMoveRight = function () {\n  if (!this.movingLeft) {\n    this.vel[0] = 0;\n  }\n  this.movingRight = false;\n  this.stopMoving();\n};\n\nCharacter.prototype.moveLeft = function () {\n  this.vel[0] = -1 * this.speed;\n  this.movingLeft = true;\n  this.startMoving();\n};\n\nCharacter.prototype.stopMoveLeft = function () {\n  if (!this.movingRight) {\n    this.vel[0] = 0;\n  }\n  this.movingLeft = false;\n  this.stopMoving();\n};\n\nCharacter.prototype.dropBomb = function () {\n  let mapPos = this.getMapBombPos(this.pos);\n  if (this.activeBombs < this.numBombs && this.alive && this.gameMap.isBomb(mapPos) === false) {\n    this.activeBombs += 1;\n    var bomb = new Bomb(mapPos, this.strength, this.gameMap, this.bombId, this.playerNum);\n    this.bombId += 1;\n    this.gameMap.addBomb(bomb);\n    setTimeout( () => {\n      this.activeBombs -= 1;\n    }, 2000);\n  }\n};\n\n\nmodule.exports = Character;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/character.js\n ** module id = 6\n ** module chunks = 0\n **/","var Bomb = function (mapPos, strength, gameMap, bombId, playerNum) {\n  this.mapPos = mapPos;\n  this.strength = strength;\n  this.gameMap = gameMap;\n  this.bombId = bombId;\n  this.playerNum = playerNum;\n\n  this.time = 0;\n  this.explodeTime = 2000;\n  this.refreshIntervalId = setInterval( ()=> {\n    this.time += 200;\n    if (this.frame === 4) {\n      this.frame = 0;\n    } else {\n      this.frame += 1;\n    }\n  }, 200 );\n  this.frame = 0;\n};\n\n\nBomb.prototype.isPlayerBomb = function (bombId, playerNum) {\n  return bombId === this.bombId && this.playerNum === playerNum;\n};\n\n\nBomb.prototype.explode = function () {\n  clearInterval(this.refreshIntervalId);\n  this.makeFlame();\n};\n\nBomb.prototype.makeFlame = function () {\n  this.flameRight();\n  this.flameLeft();\n  this.flameTop();\n  this.flameBottom();\n  this.gameMap.makeFlame(this.mapPos, 'center');\n};\n\nBomb.prototype.flameRight = function () {\n  for (var i = 0; i < this.strength; i++) {\n    let pos = [this.mapPos[0]+ 1 + i, this.mapPos[1]];\n    if (this.gameMap.isPath(pos)) {\n      let last = false;\n      if (i === this.strength - 1) {\n        last = true;\n      }\n      this.gameMap.makeFlame(pos, 'right', last);\n      // let bombId = this.gameMap.isBomb(pos);\n      // if (bombId) {\n      //   this.gameMap.removeBomb(bombId);\n      // }\n    } else if (this.gameMap.isBlock(pos)) {\n      this.gameMap.destroyBlock(pos);\n      break;\n    } else {\n      break;\n    }\n  }\n};\n\nBomb.prototype.flameLeft = function () {\n\n  for (var i = 0; i < this.strength; i++) {\n    let pos = [this.mapPos[0] - 1 - i ,this.mapPos[1]];\n    if (this.gameMap.isPath(pos)) {\n      let last = false;\n      if (i === this.strength - 1) {\n        last = true;\n      }\n      this.gameMap.makeFlame(pos, 'left', last);\n\n    } else if (this.gameMap.isBlock(pos)) {\n      this.gameMap.destroyBlock(pos);\n      break;\n    } else {\n      break;\n    }\n  }\n};\n\nBomb.prototype.flameTop = function () {\n\n  for (var i = 0; i < this.strength; i++) {\n    let pos = [this.mapPos[0], this.mapPos[1] - 1 - i];\n    if (this.gameMap.isPath(pos)) {\n      let last = false;\n      if (i === this.strength - 1) {\n        last = true;\n      }\n      this.gameMap.makeFlame(pos, 'top', last);\n\n    } else if (this.gameMap.isBlock(pos)) {\n      this.gameMap.destroyBlock(pos);\n      break;\n    } else {\n      break;\n    }\n  }\n};\n\nBomb.prototype.flameBottom = function () {\n\n  for (var i = 0; i < this.strength; i++) {\n    let pos = [this.mapPos[0], this.mapPos[1] + 1 + i];\n    if (this.gameMap.isPath(pos)) {\n      let last = false;\n      if (i === this.strength - 1) {\n        last = true;\n      }\n      this.gameMap.makeFlame(pos, 'bottom', last);\n\n    } else if (this.gameMap.isBlock(pos)) {\n      this.gameMap.destroyBlock(pos);\n      break;\n    } else {\n      break;\n    }\n  }\n};\nmodule.exports = Bomb;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/bomb.js\n ** module id = 7\n ** module chunks = 0\n **/"],"sourceRoot":""}